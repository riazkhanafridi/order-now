// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  SHOPKEEPER
  DRIVER
}

enum UserStatus {
  PENDING
  APPROVE
  REJECT
  BLOCK
}

enum OrderEventStatus {
  PENDING
  ACCEPTED
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

model Address {
  id        Int      @id @default(autoincrement())
  latitude  String
  longitude String
  city      String
  pincode   String
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  Driver    Driver?  @relation(fields: [driverId], references: [id])
  driverId  Int?

  @@index([userId])
  @@index([driverId])
  @@map("addresses")
}

model User {
  id                     Int        @id @default(autoincrement())
  name                   String
  email                  String     @unique
  password               String
  image                  String
  role                   Role       @default(SHOPKEEPER)
  businessName           String
  phoneNo                String
  nicFront               String
  nicBack                String
  status                 UserStatus @default(PENDING)
  defaultShippingAddress Int?
  defaultBillingAddress  Int?
  createdAt              DateTime?  @default(now())
  updatedAt              DateTime?  @updatedAt

  cartItem CartItem[]
  order    Order[]
  Address  Address[]

  @@map("users")
}

model Category {
  id          Int           @id @default(autoincrement())
  name        String
  image       String
  subCategory SubCategory[]
  products    Product[]

  @@map("category")
}

model SubCategory {
  id         Int       @id @default(autoincrement())
  name       String    @unique
  categoryId Int
  Category   Category  @relation(fields: [categoryId], references: [id])
  products   Product[]

  @@index([categoryId])
  @@map("sub_category")
}

model ProductImages {
  id        Int     @id @default(autoincrement())
  image     String
  productId Int
  //product   Product @relation(fields: [productId], references: [id])
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([productId])
  @@map("product_images")
}

model Product {
  id            Int          @id @default(autoincrement())
  name          String
  description   String       @db.Text
  price         Decimal
  tags          String
  stock         Int
  categoryId    Int?
  Category      Category?    @relation(fields: [categoryId], references: [id])
  subCategoryId Int?
  subCategory   SubCategory? @relation(fields: [subCategoryId], references: [id])

  createdAt DateTime @default(now())

  cartItem     CartItem[]
  productImage ProductImages[]
  orders       OrderProduct[]

  @@index([subCategoryId])
  @@index([categoryId])
  @@map("products")
}

model CartItem {
  id        Int      @id @default(autoincrement())
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updateAt  DateTime @updatedAt

  @@index([productId])
  @@index([userId])
  @@map("cart_items")
}

model Order {
  id          Int              @id @default(autoincrement())
  userId      Int
  user        User             @relation(fields: [userId], references: [id])
  netAmount   Decimal
  address     String
  status      OrderEventStatus @default(PENDING)
  DeliveredAt DateTime         @default(now())

  createdAt DateTime       @default(now())
  updatedAt DateTime       @updatedAt
  products  OrderProduct[]
  events    OrderEvent[]
  Driver    Driver?        @relation(fields: [driverId], references: [id])
  driverId  Int?

  @@index([userId])
  @@index([driverId])
  @@map("orders")
}

model OrderProduct {
  id        Int      @id @default(autoincrement())
  orderId   Int
  order     Order    @relation(fields: [orderId], references: [id])
  productId Int
  product   Product  @relation(fields: [productId], references: [id])
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([orderId])
  @@index([productId])
  @@map("order_products")
}

model OrderEvent {
  id        Int              @id @default(autoincrement())
  orderId   Int
  order     Order            @relation(fields: [orderId], references: [id])
  status    OrderEventStatus @default(PENDING)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  @@index([orderId])
  @@map("order_events")
}

model Driver {
  id        Int    @id @default(autoincrement())
  name      String
  email     String @unique
  password  String
  image     String
  role      Role   @default(DRIVER)
  phone     String
  vehicleNo String
  nicNo     Int

  createdAt DateTime @default(now())

  addresses Address[]
  orders    Order[]

  @@map("drivers")
}
